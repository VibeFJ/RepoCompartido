https://repse.stps.gob.mx/app/resultado/VHJFUVJERmFzbHpBbGYxTklsenNzL3F4ZVgyK3FNZ0E3Rm55TGllUVBTZFVyNHRhQnhKcnVQaEQyc25SODQ4Sw==_jXKdMhsAwq

public Repse deserealizarHtml(string html)
{
    var respuesta = new Repse();

    HtmlDocument doc = new HtmlDocument();
    doc.LoadHtml(html);

    // Extraer Razón Social, Fecha de Respuesta y Formato
    var razonSocialNode = doc.DocumentNode.SelectSingleNode("//p[contains(text(), 'Razón social')]/following-sibling::p");
    var fechaRespuestaNode = doc.DocumentNode.SelectSingleNode("//p[contains(text(), 'Fecha de respuesta:')]/following-sibling::p");
    var formatoNode = doc.DocumentNode.SelectSingleNode("//p[contains(text(), 'Formato:')]/following-sibling::p");

    respuesta.RazónSocial = razonSocialNode.InnerText.Trim();
    respuesta.FechaRespuesta = fechaRespuestaNode.InnerText.Trim();
    respuesta.Formato = formatoNode.InnerText.Trim();

    // Extraer Fundamento de la Respuesta
    var fundamentoRespuestaNode = doc.DocumentNode.SelectSingleNode("//p[contains(text(), 'Fundamento de la respuesta:')]/following-sibling::p");
    respuesta.FundamentoRespuesta = fundamentoRespuestaNode.InnerText.Trim();

    // Extraer datos de la tabla
    var tbody = doc.DocumentNode.SelectSingleNode("//table/tbody");

    var registros = new List<Repse.ActividadesComplementariasRepse>();

    foreach (var row in tbody.SelectNodes("tr"))
    {
        var cells = row.SelectNodes("td");

        var registro = new Repse.ActividadesComplementariasRepse
        {
            Actividad = cells[0].InnerText.Trim(),
            Folio = cells[1].InnerText.Trim(),
            ActividadesMismoGrupo = cells[2].InnerText.Trim()
        };

        registros.Add(registro);
    }

    respuesta.ActividadesComplementarias = registros;

    return respuesta;
}

[Obsolete]
public Repse validarRepse(string rutaPDF)
{
    var pdfBytes = File.ReadAllBytes(rutaPDF);

    var html = obtenerHtmlLink(pdfBytes);

    var respuesta = deserealizarHtml(html.ToString());

    return respuesta;
}

public class QRCodeTextExtractionStrategy : ITextExtractionStrategy
{
    private StringBuilder result = new StringBuilder();

    public void RenderText(TextRenderInfo renderInfo)
    {
        result.Append(renderInfo.GetText());
    }

    public string GetResultantText()
    {
        return result.ToString();
    }

    public void BeginTextBlock() { }

    public void EndTextBlock() { }

    public void RenderImage(ImageRenderInfo renderInfo) { }
}

public string ExtractQRTextFromPDF(byte[] pdfBytes)
{
    using (PdfReader reader = new PdfReader(new MemoryStream(pdfBytes)))
    {
        var strategy = new QRCodeTextExtractionStrategy();
        var processor = new PdfContentStreamProcessor(strategy);

        // Obtener el diccionario de la última página
        var pageDict = reader.GetPageN(reader.NumberOfPages);

        var resources = pageDict.GetAsDict(PdfName.RESOURCES);
        var contentArray = pageDict.GetAsArray(PdfName.CONTENTS);

        if (contentArray != null)
        {
            foreach (var item in contentArray.ArrayList)
            {
                var stream = (PRStream)PdfReader.GetPdfObject(item);
                var data = PdfReader.GetStreamBytes(stream);
                processor.ProcessContent(data, resources);
            }
        }
        else
        {
            var stream = (PRStream)PdfReader.GetPdfObject(pageDict.Get(PdfName.CONTENTS));
            var data = PdfReader.GetStreamBytes(stream);
            processor.ProcessContent(data, resources);
        }

        return strategy.GetResultantText();
    }
}


[Obsolete]
public string obtenerHtmlLink(byte[] pdfPath)
{
    var html = "";
    try
    {
        var textPDF = ExtractQRTextFromPDF(pdfPath);

        // Expresión regular para capturar la URL
        var busqueda = @"https:\/\/repse\.stps\.gob\.mx\/app\/resultado\/[^\s]+";
        //var busqueda = @"https://[^\s]+";

        // Ejecutamos la búsqueda con regex
        var match = Regex.Match(textPDF, busqueda);

        if (match.Success)
        {
            // Mostramos la URL extraída
            var url = match.Value.Replace("Powered","");
            string htmlContent = GetHtmlFromUrl(url);

            if (!string.IsNullOrEmpty(htmlContent))
            {
                // Aquí puedes trabajar con el contenido HTML
                Console.WriteLine("Contenido HTML obtenido con éxito:");

                html = htmlContent;
            }
        }
        else
        {
            html = "No se encontró ninguna URL.";
        }
    }
    catch (Exception ex)
    {
        html = ex.Message;
    }

    return html;
}

public string GetHtmlFromUrl(string url)
{
    using (HttpClient client = new HttpClient())
    {
        try
        {
            System.Net.ServicePointManager.SecurityProtocol = System.Net.SecurityProtocolType.Tls12;

            // Desactiva la validación de certificados (solo para desarrollo)
            //System.Net.ServicePointManager.ServerCertificateValidationCallback = (sender, certificate, chain, sslPolicyErrors) => true;

            // Envía la solicitud HTTP GET y espera la respuesta de forma sincrónica
            HttpResponseMessage response = client.GetAsync(url).GetAwaiter().GetResult();

            // Lanza una excepción si la solicitud no fue exitosa
            response.EnsureSuccessStatusCode();

            // Lee el contenido de la respuesta como una cadena de forma sincrónica
            string htmlContent = response.Content.ReadAsStringAsync().GetAwaiter().GetResult();

            return htmlContent;
        }
        catch (HttpRequestException e)
        {
            throw new Exception(e.Message);
        }
    }
}

